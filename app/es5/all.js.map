{"version":3,"sources":["const.js","let.js"],"names":[],"mappings":";;AAAA,QAAQ,CAAC,aAAa,EAAE,YAAW;AACjC,cAAY,CAAC;;AAEb,IAAE,CAAC,+BAA+B,EAAE,YAAW;;AAE7C,QAAM,QAAQ,GAAG,EAAE;;;;AAAC,AAIpB,UAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GAE3B,CAAC,CAAC;;AAEH,IAAE,CAAC,8BAA8B,EAAE,YAAU;;AAE3C,QAAM,CAAC,GAAG,EAAE,CAAC;;AAEb,QAAI,MAAM,GAAG,SAAT,MAAM,GAAa;AACrB,UAAI,CAAC,GAAG,EAAE,CAAC;AACX,aAAO,CAAC,CAAC;KACV,CAAA;;AAED,QAAI,MAAM,GAAG,MAAM,EAAE,CAAC;AACtB,UAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACxB,UAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GAEpB,CAAC,CAAC;CACJ,CAAC,CAAC;;;AC3BH,QAAQ,CAAC,eAAe,EAAE,YAAU;;AAElC,IAAE,CAAC,uCAAuC,EAAE,YAAW;AACrD,QAAI,MAAM,GAAG,SAAT,MAAM,CAAY,IAAI,EAAC;AACzB,UAAI,IAAI,EAAC;AACP,YAAI,CAAC,GAAG,CAAC,CAAC;AACV,eAAO,CAAC,CAAC;OACV;KACF,CAAA;;AAED,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1B,UAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC,CAAC;;AAEH,IAAE,CAAC,qCAAqC,EAAE,YAAW;AACnD,QAAI,MAAM,GAAG,SAAT,MAAM,GAAa;AACrB,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAC,EAE3B;;AAED,aAAO,CAAC,CAAC;KACV,CAAA;;AAED,QAAI,MAAM,GAAG,MAAM,EAAE,CAAC;AACtB,UAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACzB,CAAC,CAAC;CAEJ,CAAC,CAAC","file":"all.js","sourcesContent":["describe(\"using const\", function() {\n  \"use strict\";\n\n  it(\"will make a variable readonly\", function() {\n\n    const MAX_SIZE = 12;\n\n    //MAX_SIZE = 10;\n\n    expect(MAX_SIZE).toBe(12);\n\n  });\n\n  it(\"can shadow outer declaration\", function(){\n\n    const x = 12;\n\n    var doWork = function(){\n      let x = 10;\n      return x;\n    }\n\n    var result = doWork();\n    expect(result).toBe(10);\n    expect(x).toBe(12);\n\n  });\n});\n","describe(\"how let works\", function(){\n\n  it(\"will provide block scoping unline var\", function() {\n    var doWork = function(flag){\n      if (flag){\n        let x = 3;\n        return x;\n      }\n    }\n\n    var result = doWork(true);\n    expect(result).toBe(3);\n  });\n\n  it(\"will provide block scoping with for\", function() {\n    var doWork = function(){\n      for (var i = 0; i < 10; i++){ \n\n      }\n\n      return i;\n    }\n\n    var result = doWork();\n    expect(result).toBe(10);\n  });\n\n});\n"],"sourceRoot":"/source/"}